{
  "version": 3,
  "sources": [
    "src/signal.test.js"
  ],
  "names": [
    "createSignal",
    "warnSpy",
    "console",
    "warnOnRecursed",
    "throwOnRecursed",
    "message",
    "listen",
    "fn",
    "uninstaller",
    "installer",
    "signal",
    "listener",
    "remove",
    "recursedSpy",
    "recursed",
    "emit",
    "emitted",
    "emitExecution",
    "args",
    "isListened",
    "assert",
    "equal",
    "listenOnce",
    "spy",
    "firstSignal",
    "secondSignal",
    "value",
    "firstSpy",
    "secondSpy",
    "removeFirstListener",
    "a",
    "b",
    "removeLastListener",
    "removeMiddleListener",
    "c",
    "smart",
    "expectCalledOnceWith",
    "nextSpy",
    "onceSpy",
    "removeListenOnce",
    "then",
    "installed",
    "disableWhileCalling",
    "previousListeners",
    "deepEqual",
    "length",
    "isEmitting",
    "getEmitExecution",
    "undefined",
    "listenerA",
    "getIndex",
    "getListeners",
    "listenerB",
    "listenerC",
    "getReturnValue",
    "getArguments",
    "stop",
    "Promise",
    "resolve",
    "resolved",
    "reject",
    "emitter",
    "asyncSimultaneousEmitter",
    "createPromiseAndResolve",
    "promise",
    "arg",
    "first",
    "second",
    "emitPromise",
    "reverseSerialEmitter",
    "visitor",
    "v"
  ],
  "mappings": "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",
  "sourcesContent": [
    "// https://github.com/cowboy/jquery-throttle-debounce/blob/master/unit/unit.js\n\nimport { createSignal, warnOnRecursed, throwOnRecursed, createAsyncSignal } from \"./signal.js\"\nimport {\n  asyncSimultaneousEmitter,\n  reverseSerialEmitter,\n  someAsyncListenerResolvesWith,\n} from \"./emitter/index.js\"\nimport { createSpy, installSpy } from \"@dmail/spy\"\nimport { test } from \"@dmail/test\"\nimport {\n  expectFunction,\n  expectCalledOnceWith,\n  expectCalledTwiceWith,\n  expectCalledExactly,\n  expectCalledOnceWithoutArgument,\n  expectCalledTwiceWithoutArgument,\n  expectChain,\n  expectTrue,\n  expectFalse,\n  expectNotCalled,\n  expectThrowWith,\n  matchErrorWith,\n  matchString,\n  matchObject,\n  matchProperties,\n  expectPropertiesDeep,\n  expectResolveWith,\n  expectRejectWith,\n} from \"@dmail/expect\"\nimport assert from \"assert\"\n\ntest(() => expectFunction(createSignal))\n\n// warn on recursed\ntest(() => {\n  const warnSpy = createSpy()\n  installSpy(warnSpy, console, \"warn\", warnOnRecursed)\n  return expectCalledOnceWith(warnSpy, matchString())\n})\n\n// throw on recursed\ntest(() => {\n  return expectThrowWith(\n    throwOnRecursed,\n    matchErrorWith({\n      message: matchString(),\n    }),\n  )\n})\n\n// listen same function only once\ntest(() => {\n  const { listen } = createSignal()\n  const fn = () => {}\n  listen(fn)\n  return expectThrowWith(\n    () => listen(fn),\n    matchErrorWith({\n      message: matchString(),\n    }),\n  )\n})\n\n// installer/uninstaller behaviour\ntest(() => {\n  const uninstaller = createSpy(\"uninstaller\")\n  const installer = createSpy(() => uninstaller)\n  const signal = createSignal({\n    installer,\n  })\n  const listener = signal.listen(() => {})\n\n  return expectChain(\n    () => expectCalledOnceWith(installer, signal),\n    () => listener.remove(),\n    () => expectCalledOnceWith(uninstaller),\n    () => signal.listen(() => {}),\n    () => expectCalledTwiceWith(installer, signal),\n  )\n})\n\n// recursed hook\ntest(() => {\n  const recursedSpy = createSpy()\n  const { listen, emit } = createSignal({\n    recursed: recursedSpy,\n  })\n  let emitted = false\n  listen(() => {\n    if (emitted === false) {\n      emitted = true\n      emit(10)\n    }\n  })\n  emit()\n\n  return expectCalledOnceWith(\n    recursedSpy,\n    matchProperties({ emitExecution: matchObject(), args: matchProperties([10]) }),\n  )\n})\n\n// isListened\ntest(() => {\n  const { listen, isListened } = createSignal()\n\n  assert.equal(isListened(), false)\n  const listener = listen(() => {})\n  assert.equal(isListened(), true)\n  listener.remove()\n  assert.equal(isListened(), false)\n})\n\n// listenOnce(fn) remove the listener before calling it\ntest(() => {\n  const { listenOnce, emit } = createSignal()\n  const spy = createSpy()\n  listenOnce(spy)\n  emit()\n  emit()\n  return expectCalledOnceWithoutArgument(spy)\n})\n\n// listenOnce return previous listener on already listened fn\ntest(() => {\n  const { listenOnce } = createSignal()\n  const fn = () => {}\n  listenOnce(fn)\n  return expectThrowWith(\n    () => listenOnce(fn),\n    matchErrorWith({\n      message: matchString(),\n    }),\n  )\n})\n\n// listenOnce indicates why listener was removed\ntest(() => {\n  const { listenOnce, emit } = createSignal()\n  listenOnce(() => \"foo\")\n  return expectPropertiesDeep(emit(), [\"foo\"])\n})\n\n// \"same function can be listen() and listenOnce() on two different signal\ntest(() => {\n  const firstSignal = createSignal()\n  const secondSignal = createSignal()\n  const spy = createSpy()\n\n  firstSignal.listen(spy)\n  secondSignal.listenOnce(spy)\n\n  return expectChain(\n    () => expectNotCalled(spy),\n    () => firstSignal.emit(),\n    () => expectCalledExactly(spy, 1),\n    () => secondSignal.emit(),\n    () => expectCalledExactly(spy, 2),\n    () => secondSignal.emit(),\n    () => expectCalledExactly(spy, 2),\n    () => firstSignal.emit(),\n    () => expectCalledExactly(spy, 3),\n  )\n})\n\n// emit(...args) call listener with args\ntest(() => {\n  const { listen, emit } = createSignal()\n  const spy = createSpy()\n  const value = 1\n  listen(spy)\n  emit(value)\n\n  return expectCalledOnceWith(spy, value)\n})\n\n// emit() call all listeners\ntest(() => {\n  const { listen, emit } = createSignal()\n  const value = 1\n  const firstSpy = createSpy()\n  const secondSpy = createSpy()\n  listen(firstSpy)\n  listen(secondSpy)\n  emit(value)\n\n  return expectChain(\n    () => expectCalledOnceWith(firstSpy, value),\n    () => expectCalledOnceWith(secondSpy, value),\n  )\n})\n\n// removeListener() called on first listener during emit\ntest(() => {\n  let removeFirstListener\n  const a = createSpy(() => removeFirstListener())\n  const b = createSpy()\n  const { listen, emit } = createSignal()\n  removeFirstListener = listen(a).remove\n  listen(b)\n  emit()\n  emit()\n  return expectChain(\n    () => expectCalledOnceWithoutArgument(a),\n    () => expectCalledTwiceWithoutArgument(b),\n  )\n})\n\n// removeListener() called on last listener during emit\ntest(() => {\n  let removeLastListener\n  const a = createSpy()\n  const b = createSpy(() => removeLastListener())\n  const { listen, emit } = createSignal()\n  listen(a)\n  removeLastListener = listen(b).remove\n  emit()\n  emit()\n  return expectChain(\n    () => expectCalledTwiceWithoutArgument(a),\n    () => expectCalledOnceWithoutArgument(b),\n  )\n})\n\n// removeListener() called on middle listener during emit\ntest(() => {\n  let removeMiddleListener\n  const a = createSpy()\n  const b = createSpy(() => removeMiddleListener())\n  const c = createSpy()\n  const { listen, emit } = createSignal()\n  listen(a)\n  removeMiddleListener = listen(b).remove\n  listen(c)\n  emit()\n  emit()\n\n  return expectChain(\n    () => expectCalledTwiceWithoutArgument(a),\n    () => expectCalledOnceWithoutArgument(b),\n    () => expectCalledTwiceWithoutArgument(c),\n  )\n})\n\n// removeListener() called on already removed listener\ntest(() => {\n  const { listen } = createSignal()\n  const { remove } = listen(() => {})\n  return expectChain(() => expectTrue(remove()), () => expectFalse(remove()))\n})\n\n// smart option\ntest(() => {\n  const spy = createSpy()\n  const { emit, listen, listenOnce } = createSignal({ smart: true })\n  const args = [0, 1]\n  listen(spy)\n\n  return expectChain(\n    () => expectNotCalled(spy),\n    () => emit(...args),\n    () => expectCalledOnceWith(spy, ...args),\n    () => {\n      const nextSpy = createSpy()\n      listen(nextSpy)\n      return expectCalledOnceWith(nextSpy, ...args)\n    },\n    () => {\n      const onceSpy = createSpy()\n      const removeListenOnce = listenOnce(onceSpy).remove\n      return expectCalledOnceWith(onceSpy, ...args).then(() => expectFalse(removeListenOnce()))\n    },\n  )\n})\n\n// disableWhileCalling must prevent listener call before function restore them after\n// and installer/uninstaller are updated accordingly\ntest(() => {\n  let installed = false\n  const installer = () => {\n    installed = true\n    return () => {\n      installed = false\n    }\n  }\n  const { listen, emit, disableWhileCalling } = createSignal({\n    installer,\n  })\n\n  const previousListeners = [listen(() => \"a\"), listen(() => \"b\"), listen(() => \"c\")]\n\n  assert.equal(installed, true)\n  disableWhileCalling(() => {\n    assert.equal(installed, false)\n    assert.deepEqual(emit(), [])\n\n    listen(() => \"d\")\n    listen(() => \"e\")\n    assert.equal(installed, true)\n    assert.deepEqual(emit(), [\"d\", \"e\"])\n\n    previousListeners[1].remove()\n  })\n  assert.equal(installed, true)\n  assert.deepEqual(emit(), [\"a\", \"c\", \"d\", \"e\"])\n})\n\ntest(() => {\n  let installed = false\n  const installer = () => {\n    installed = true\n    return () => {\n      installed = false\n    }\n  }\n  const { listen, emit, disableWhileCalling } = createSignal({\n    installer,\n  })\n\n  listen(() => \"a\")\n  disableWhileCalling(() => {\n    assert.equal(emit().length, 0)\n  })\n  assert.equal(installed, true)\n  assert.equal(emit()[0], \"a\")\n})\n\n// duplicate listener still work during disableWhileCalling\ntest(() => {\n  const { listen, disableWhileCalling } = createSignal()\n\n  const fn = () => {}\n\n  listen(fn)\n  disableWhileCalling(() => {\n    assert.throws(() => listen(fn))\n  })\n})\n\ntest(() => {\n  let installed = false\n  const installer = () => {\n    installed = true\n    return () => {\n      installed = false\n    }\n  }\n  const { disableWhileCalling, listen } = createSignal({ installer })\n\n  assert.equal(installed, false)\n  disableWhileCalling(() => {\n    assert.equal(installed, false)\n    listen(() => {})\n    assert.equal(installed, true)\n  })\n  assert.equal(installed, true)\n})\n\n// isEmitting\ntest(() => {\n  const { isEmitting, listen, emit } = createSignal()\n\n  listen(() => isEmitting())\n  listen(() => isEmitting())\n  assert.equal(isEmitting(), false)\n  assert.deepEqual(emit(), [true, true])\n  assert.equal(isEmitting(), false)\n})\n\n// getEmitExecution\ntest(() => {\n  const { getEmitExecution, listen, emit } = createSignal()\n\n  let emitExecution\n\n  emitExecution = getEmitExecution()\n  assert.equal(emitExecution, undefined)\n  const listenerA = listen(() => {\n    emitExecution = getEmitExecution()\n    assert.equal(emitExecution.getIndex(), 0)\n    // eslint-disable-next-line no-use-before-define\n    assert.deepEqual(emitExecution.getListeners(), [listenerA, listenerB, listenerC])\n    assert.deepEqual(emitExecution.getReturnValue(), [])\n    assert.deepEqual(emitExecution.getArguments(), [10])\n    return \"A\"\n  })\n  const listenerB = listen(() => {\n    emitExecution = getEmitExecution()\n    assert.equal(emitExecution.getIndex(), 1)\n    assert.deepEqual(emitExecution.getReturnValue(), [\"A\"])\n    return \"B\"\n  })\n  const listenerC = listen(() => \"C\")\n  assert.deepEqual(emit(10), [\"A\", \"B\", \"C\"])\n  emitExecution = getEmitExecution()\n  assert.equal(emitExecution, undefined)\n})\n\ntest(() => {\n  const { getEmitExecution, listen, emit } = createSignal()\n\n  listen(() => {\n    getEmitExecution().stop()\n    return \"a\"\n  })\n  listen(() => \"b\")\n  assert.deepEqual(emit(), [\"a\"])\n})\n\n// async signal emit() return a thenable resolved with resolved values of listeners\ntest(() => {\n  const { listen, emit } = createAsyncSignal()\n\n  listen((a) => Promise.resolve(a + 1))\n  return expectResolveWith(emit(10), matchProperties([11]))\n})\n\n// async signal listener are executed in serie\ntest(() => {\n  const { listen, emit } = createAsyncSignal({})\n\n  let resolved = false\n  listen(() =>\n    Promise.resolve().then(() => {\n      resolved = true\n    }),\n  )\n  listen(() => resolved)\n\n  return expectResolveWith(emit(), matchProperties([undefined, true]))\n})\n\n// emit rejected when throw in a listener fn\ntest(() => {\n  const { listen, emit } = createAsyncSignal()\n\n  listen(() => {\n    // eslint-disable-next-line no-throw-literal\n    throw 1\n  })\n\n  return expectRejectWith(emit(), 1)\n})\n\n// emit reject when listener return rejected promise\ntest(() => {\n  const { listen, emit } = createAsyncSignal()\n\n  listen(() => Promise.reject(1))\n\n  return expectRejectWith(emit(), 1)\n})\n\ntest(() => {\n  const { listen, emit } = createAsyncSignal({\n    emitter: asyncSimultaneousEmitter,\n  })\n  let resolved = false\n  listen(() => {\n    return Promise.resolve().then(() => {\n      resolved = true\n      return 1\n    })\n  })\n  listen(() => {\n    return resolved\n  })\n\n  return expectResolveWith(emit(), matchProperties([1, false]))\n})\n\n// asyncSimultaneousEmitter + stop\ntest(() => {\n  const { listen, emit, getEmitExecution } = createAsyncSignal({\n    emitter: asyncSimultaneousEmitter,\n  })\n  let resolved = false\n  listen(() => {\n    return Promise.resolve().then(() => {\n      resolved = true\n      return 1\n    })\n  })\n  listen(() => {\n    getEmitExecution().stop()\n    return resolved\n  })\n  listen(() => 3)\n\n  return expectResolveWith(emit(), matchProperties([1, false]))\n})\n\nconst createPromiseAndResolve = () => {\n  let resolve\n  const promise = new Promise((arg) => {\n    resolve = arg\n  })\n  return { promise, resolve }\n}\n\n// async simultaneous + stops always awaits stopped return value\ntest(() => {\n  const { listen, emit, getEmitExecution } = createAsyncSignal({\n    emitter: asyncSimultaneousEmitter,\n  })\n\n  const first = createPromiseAndResolve()\n  const second = createPromiseAndResolve()\n\n  listen(() => {\n    return first.promise\n  })\n  listen(() => {\n    getEmitExecution().stop()\n    return second.promise\n  })\n\n  const emitPromise = emit()\n\n  first.resolve(1)\n\n  return expectResolveWith(\n    first.promise.then(() => {\n      second.resolve(2)\n      return emitPromise\n    }),\n    matchProperties([1, 2]),\n  )\n})\n\n// asyncSimultaneous empty\ntest(() => {\n  const { emit } = createAsyncSignal({\n    emitter: asyncSimultaneousEmitter,\n  })\n\n  return expectResolveWith(emit(), matchProperties([]))\n})\n\n// asyncSimultaneous + reject\ntest(() => {\n  const { listen, emit } = createAsyncSignal({\n    emitter: asyncSimultaneousEmitter,\n  })\n\n  listen(() => Promise.reject(1))\n\n  return expectRejectWith(emit(), 1)\n})\n\n// reverseSerialEmitter\ntest(() => {\n  const { listen, emit } = createAsyncSignal({\n    emitter: reverseSerialEmitter,\n  })\n\n  listen(() => \"a\")\n  listen(() => \"b\")\n  assert.deepEqual(emit(), [\"b\", \"a\"])\n})\n\n// someAsyncListenerReturns\ntest(() => {\n  const { listen, emit } = createAsyncSignal({\n    emitter: () => {\n      return {\n        visitor: someAsyncListenerResolvesWith((value) => value === \"foo\"),\n      }\n    },\n  })\n\n  listen((v) => v)\n\n  return expectChain(\n    () => expectResolveWith(emit(\"bar\"), false),\n    () => expectResolveWith(emit(\"foo\"), true),\n  )\n})\n"
  ]
}